#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include "./totem_key_position.h"
#include "./totem_macro.h"

/*=====================*/
/* Hold tap            */
/*=====================*/
#define HT        flavor = "balanced"; tapping-term-ms = <280>; quick-tap-ms = <180>; require-prior-idle-ms = <120>;
#define HT_LEFT   hold-trigger-key-positions = <R1_X R2_X R3_X LA_X LT_X>;
#define HT_RIGHT  hold-trigger-key-positions = <L1_X L2_X L3_X RA_X RT_X>;
#define HT_MT     bindings = <&kp>, <&kp>; hold-trigger-on-release; 
#define HT_LT     bindings = <&mo>, <&kp>;
ZMK_HOLD_TAP(lmt, HT HT_LEFT  HT_MT)  
ZMK_HOLD_TAP(llt, HT HT_LEFT  HT_LT)
ZMK_HOLD_TAP(rmt, HT HT_RIGHT HT_MT)
ZMK_HOLD_TAP(rlt, HT HT_RIGHT HT_LT)
ZMK_HOLD_TAP(tmt, HT          HT_MT)
ZMK_HOLD_TAP(tlt, HT          HT_LT)

/*=====================*/
/* Mod morph           */
/*=====================*/
#define MORP_SHIFT(NAME, BASE, SHIFTED) \
  ZMK_MOD_MORPH(NAME, \
    mods = <(MOD_LSFT|MOD_RSFT)>; \
    bindings = <BASE>, <SHIFTED>; \
  )
MORP_SHIFT(M_COMMA, &kp COMMA, &kp QMARK)
MORP_SHIFT(M_DOT,   &kp DOT,   &kp EXCL)
MORP_SHIFT(M_FSLH,  &kp FSLH,  &kp BSLH)

/*=====================*/
/* Alias               */
/*=====================*/
#define BASE 0
#define NAVI 1
#define SYMB 2

#define LH1(keycode) &lmt LGUI keycode
#define LH2(keycode) &lmt LALT keycode
#define LH3(keycode) &lmt LCTRL keycode
#define LH4(keycode) &lmt LSHFT keycode
#define LH12(keycode) &lmt LG(LALT) keycode
#define LH23(keycode) &lmt LA(LCTRL) keycode
#define LH24(keycode) &lmt LA(LSHFT) keycode
#define LH34(keycode) &lmt LC(LSHFT) keycode

#define RH1(keycode) &rmt LGUI keycode
#define RH2(keycode) &rmt LALT keycode
#define RH3(keycode) &rmt LCTRL keycode
#define RH4(keycode) &rmt LSHFT keycode
#define RH12(keycode) &rmt LG(LALT) keycode
#define RH23(keycode) &rmt LA(LCTRL) keycode
#define RH24(keycode) &rmt LA(LSHFT) keycode
#define RH34(keycode) &rmt LC(LSHFT) keycode

#define __________ &trans
#define EMOJI      &kp LC(LG(SPACE))
#define SCR_CAP    &kp LS(LC(LG(N4)))
#define SCR_REC    &kp LS(LG(N5))
#define SCR_PRV    &kp LC(LEFT)
#define SCR_NXT    &kp LC(RIGHT)
#define LANGCHG    &kp LC(RIGHT)

#define SYMB_RET   &tlt SYMB RET
#define NAVI_SPC   &tlt NAVI SPACE
#define SHFT_BSP   &tmt LSHFT BSPC
#define SYMB_ESC   &tlt SYMB ESC

#define A_LEFT     &kp LA(LEFT)
#define A_RIGHT    &kp LA(RIGHT)
#define A_UP       &kp LA(UP)
#define A_DOWN     &kp LA(DOWN)

/*=====================*/
/* Layer               */
/*=====================*/
ZMK_LAYER(base_layer, /*
╭────────────┬────────────┬────────────┬────────────┬────────────╮╭────────────┬────────────┬────────────┬────────────┬────────────╮
*/&kp Q        &kp W        &kp E        &kp R        &kp T         &kp Y        &kp U        &kp I        &kp O        &kp P     /*
├────────────┼────────────┼────────────┼────────────┼────────────┤├────────────┼────────────┼────────────┼────────────┼────────────┤
*/LH1(A)       LH2(S)       LH3(D)       LH4(F)       &kp G         &kp H        RH4(J)       RH3(K)       RH2(L)       RH1(SEMI) /*
├────────────┼────────────┼────────────┼────────────┼────────────┤├────────────┼────────────┼────────────┼────────────┼────────────┤
*/&kp Z        &kp X        &kp C        &kp V        &kp B         &kp N        &kp M        &M_COMMA     &M_DOT       &M_FSLH   /*
╰────────────┴────────────┴────────────┴────────────┴────────────╯╰────────────┴────────────┴────────────┴────────────┴────────────╯
╭────────────╮            ╭────────────┬────────────┬────────────╮╭────────────┬────────────┬────────────╮            ╭────────────╮
*/SCR_PRV      &none        SCR_NXT      SYMB_RET     NAVI_SPC      SHFT_BSP     SYMB_ESC     &kp C_PP     &none        &kp APOS  /*
╰────────────╯            ╰────────────┴────────────┴────────────╯╰────────────┴────────────┴────────────╯            ╰────────────╯
*/)

ZMK_LAYER(navi_layer, /*
╭────────────┬────────────┬────────────┬────────────┬────────────╮╭────────────┬────────────┬────────────┬────────────┬────────────╮
*/&kp N0       &kp N7       &kp N8       &kp N9       __________    __________   A_LEFT       A_DOWN       A_UP         A_RIGHT   /*
├────────────┼────────────┼────────────┼────────────┼────────────┤├────────────┼────────────┼────────────┼────────────┼────────────┤
*/LH1(N0)      LH2(N4)      LH3(N5)      LH4(N6)      __________    __________   RH4(LEFT)    RH3(DOWN)    RH2(UP)      RH1(RIGHT)/*
├────────────┼────────────┼────────────┼────────────┼────────────┤├────────────┼────────────┼────────────┼────────────┼────────────┤
*/&kp N0       &kp N1       &kp N2       &kp N3       __________    __________   &kp HOME     &kp PG_DN    &kp PG_UP    &kp END   /*
╰────────────┴────────────┴────────────┴────────────┴────────────╯╰────────────┴────────────┴────────────┴────────────┴────────────╯
╭────────────╮            ╭────────────┬────────────┬────────────╮╭────────────┬────────────┬────────────╮            ╭────────────╮
*/__________   __________   __________   __________   __________    __________   __________   __________   __________   __________/*
╰────────────╯            ╰────────────┴────────────┴────────────╯╰────────────┴────────────┴────────────╯            ╰────────────╯
*/)

ZMK_LAYER(symb_layer, /*
╭────────────┬────────────┬────────────┬────────────┬────────────╮╭────────────┬────────────┬────────────┬────────────┬────────────╮
*/__________   &kp PIPE     &kp AMPS     __________   __________    &kp GRAVE    &kp CARET    &kp LBKT     &kp RBKT     &kp DLLR  /*
├────────────┼────────────┼────────────┼────────────┼────────────┤├────────────┼────────────┼────────────┼────────────┼────────────┤
*/LH1(TILDE)   LH2(MINUS)   LH3(PLUS)    LH4(EQUAL)   &kp AT        &kp PRCNT    RH4(LBRC)    RH3(LPAR)    RH2(RPAR)    RH1(RBRC) /*
├────────────┼────────────┼────────────┼────────────┼────────────┤├────────────┼────────────┼────────────┼────────────┼────────────┤
*/&kp HASH     &kp FSLH     &kp STAR     &kp UNDER    __________    __________   &kp SQT      &kp LT       &kp GT       &kp DQT   /*
╰────────────┴────────────┴────────────┴────────────┴────────────╯╰────────────┴────────────┴────────────┴────────────┴────────────╯
╭────────────╮            ╭────────────┬────────────┬────────────╮╭────────────┬────────────┬────────────╮            ╭────────────╮
*/__________   __________   __________   __________   __________    __________   __________   __________   __________   __________/*
╰────────────╯            ╰────────────┴────────────┴────────────╯╰────────────┴────────────┴────────────╯            ╰────────────╯
*/)

/*=====================*/
/* Combo               */
/*=====================*/
ZMK_COMBO(l_del,  LH12(DEL)    , L2_1 L2_2)
ZMK_COMBO(l_tab,  LH23(TAB)    , L2_2 L2_3)
ZMK_COMBO(l_ret,  LH24(RET)    , L2_3 L2_4)
ZMK_COMBO(l_esc,  LH24(ESC)    , L2_2 L2_4)
ZMK_COMBO(l_bspc, &kp BSPC     , L2_4 L2_5)
ZMK_COMBO(r_lang, RH34(LANGCHG), R2_4 R2_3)
ZMK_COMBO(r_caps, RH23(CAPS)   , R2_3 R2_2)
