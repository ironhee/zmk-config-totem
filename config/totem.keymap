#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include "./totem_key_position.h"
#include "./totem_macro.h"

// Layer
#define BASE 0
#define NAVI 1
#define NUMB 2
#define SYMB 3
#define FUNC 4

/ {
  macros {
    IRONHEE_MACRO(wordpv, <&macro_press &kp LALT>, <&macro_tap &kp LEFT>, <&macro_release &kp LALT>)
    IRONHEE_MACRO(wordnx, <&macro_press &kp LALT>, <&macro_tap &kp RIGHT>, <&macro_release &kp LALT>)
  };
  behaviors {
    // Hold Tap
    IRONHEE_THUM_ROW(tht, &kp, &kp) // thumb keys
    IRONHEE_HOME_ROW(lht, &kp, &kp, R1_X R2_X R3_X LA_X LT_X) // left keys
    IRONHEE_HOME_ROW(rht, &kp, &kp, L1_X L2_X L3_X RA_X RT_X) // right keys
    // Morp Shift
    IRONHEE_MORP_SHIFT(m_flsh,   &kp FSLH,  &kp BSLH)
    IRONHEE_MORP_SHIFT(m_qmark,  &kp QMARK, &kp EXCL)
  };
  combos {
    compatible = "zmk,combos";
    // Left Hand Combo
    IRONHEE_COMBO_HORI(l_tab,  L2_2 L2_3     , &lht LA(LCMD) TAB)
    IRONHEE_COMBO_HORI(l_ret,       L2_3 L2_4, &lht LS(LCMD) RET)
    IRONHEE_COMBO_HORI(l_esc,  L2_2      L2_4, &lht LA(LSHFT) ESC)
    IRONHEE_COMBO_HORI(l_del,  L3_2 L3_3     , &kp DEL)
    IRONHEE_COMBO_HORI(l_bspc,      L3_3 L3_4, &kp BSPC)
    // Right Hand Combos
    IRONHEE_COMBO_HORI(r_lang, R2_4 R2_3     , &rht LS(LCMD) LC(SPACE))
    IRONHEE_COMBO_HORI(r_caps,      R2_3 R2_2, &rht LA(LCMD) CAPS)
  };
  keymap {
    compatible = "zmk,keymap";
    base_layer {
      label = "BASE";
      bindings = <
        &kp Q        &kp W       &kp E       &kp R         &kp T          /*=*/ &kp Y           &kp U        &kp I          &kp O       &kp P
        &lht LCTRL A &lht LALT S &lht LCMD D &lht LSHFT F  &kp G          /*=*/ &kp H           &rht LSHFT J &rht LCMD K    &rht LALT L &rht LCTRL APOS
        &kp Z        &kp X       &lt FUNC C  &lt SYMB V    &kp B          /*=*/ &kp N           &lt SYMB M   &lt NUMB COMMA &kp DOT     &m_flsh
        &m_qmark     &none       &mo SYMB    &tht LCMD RET &lt NAVI SPACE /*=*/ &tht LSHFT BSPC &lt NUMB DEL &mo SYMB       &none       &kp SEMI
      >;
    };
    navi_layer {
      label = "NAVI";
      bindings = <
        &trans    &trans   &trans   &trans    &trans /*=*/ &kp PG_DN    &wordpv      &kp UP     &wordnx      &kp PG_UP
        &kp LCTRL &kp LALT &kp LCMD &kp LSHFT &trans /*=*/ &kp LG(LEFT) &kp LEFT     &kp DOWN   &kp RIGHT    &kp LG(RIGHT)
        &trans    &trans   &trans   &trans    &trans /*=*/ &trans       &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &trans
        &trans    &none    &trans   &trans    &trans /*=*/ &trans       &trans       &trans     &none        &trans
      >;
    };
    numb_layer {
      label = "NUMB";
      bindings = <
        &kp N0 &kp N7 &kp N8 &kp N9 &trans /*=*/ &trans &trans    &trans   &trans   &trans
        &kp N0 &kp N4 &kp N5 &kp N6 &trans /*=*/ &trans &kp LSHFT &kp LCMD &kp LALT &kp LCTRL
        &kp N0 &kp N1 &kp N2 &kp N3 &trans /*=*/ &trans &trans    &trans   &trans   &trans
        &trans &none  &trans &trans &trans /*=*/ &trans &trans    &trans   &none    &trans
      >;
    };
    symb_layer {
      label = "SYMB";
      bindings = <
        &kp PIPE      &kp LT          &kp GT         &kp AMPS         &trans    /* */ &trans    &trans           &kp LBKT       &kp RBKT       &kp BSLH
        &lht LCTRL AT &lht LALT MINUS &lht LCMD PLUS &lht LSHFT EQUAL &kp PRCNT /* */ &trans    &rht LSHFT UNDER &rht LCMD LPAR &rht LALT RPAR &rht LCTRL GRAVE
        &kp HASH      &kp FSLH        &kp STAR       &kp PIPE         &kp AMPS  /* */ &kp CARET &kp DLLR         &kp LBRC       &kp RBRC       &kp TILDE
        &trans        &none           &trans         &trans           &trans    /* */ &trans    &trans           &trans         &none          &trans
      >;
    };
    func_layer {
      label = "FUNC";
      bindings = <
        &trans    &trans   &trans   &trans    &trans /*=*/ &trans &kp F7  &kp F8 &kp F9 &kp F12
        &kp LCTRL &kp LALT &kp LCMD &kp LSHFT &trans /*=*/ &trans &kp F4  &kp F5 &kp F6 &kp F11
        &trans    &trans   &trans   &trans    &trans /*=*/ &trans &kp F1  &kp F2 &kp F3 &kp F10
        &trans    &none    &trans   &trans    &trans /*=*/ &trans &trans  &trans &none  &trans
      >;
    };
  };
};